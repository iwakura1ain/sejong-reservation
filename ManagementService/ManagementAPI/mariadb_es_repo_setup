#!/usr/bin/env bash
# shellcheck disable=2016 disable=1091 disable=2059

version="2023-03-13"

# Notes:
#   2023-03-13 - Add to the error message about missing/wrong version
#   2022-10-26 - Fix issue with Enterprise Tools repository on aarch64
#   2022-10-25 - Add support for the MariaDB Enterprise Tools repository
#   2022-09-12 - Minor updates to some info messages
#   2022-08-09 - Add RHEL/Rocky 9
#   2022-07-27 - Remove Debian 9 Stretch
#   2022-06-14 - Add --skip-verify option for skipping version verification
#   2022-06-02 - Look up current MariaDB and Maxscale versions
#   2022-05-31 - Check token locally for correct form before verifying
#   2022-05-03 - Add Rocky 8 to usage/help output, remove CentOS 8
#   2022-04-21 - add Ubuntu 22.04 LTS "jammy"
#   2022-04-05 - Fix issues with SLES 15 and RHEL 7 aarch64 repository setup
#   2022-03-11 - Update various documentation URLs
#   2022-01-31 - Verify that server version is valid
#   2022-01-18 - Add --arch flag to manually specify the CPU architecture
#   2021-12-10 - Update keyring URL
#   2021-12-01 - Update GPG URLs
#   2021-10-26 - Better default permissions for Ubuntu/Debian list file
#   2021-10-07 - Improve token verification
#   2021-10-04 - Fix MaxScale ARM support
#   2021-09-09 - Add aarch64/arm64 server repositories
#   2021-08-02 - Add Debian 11 Bullseye & aarch64/arm64 MaxScale repositories
#   2021-07-30 - Remove Ubuntu 16.04 Xenial
#   2021-07-06 - Update MariaDB to 10.6
#   2021-06-28 - Fix warnings with debug repositories on Ubuntu 18.04 Bionic
#   2021-06-24 - MDEV-25991, adjust apt-transport-https dependency
#   2021-06-09 - Limit deb repos to amd64 architecture
#   2021-06-07 - MDEV-25805 fix detection for Rocky and Alma Linux 8
#   2021-06-01 - Clean Package Cache after yum/dnf/zyp repository configuration
#   2021-05-04 - Fix MaxScale repository paths, change version to 'latest'
#   2021-03-04 - Add chmod step to ensure apt can read the keyring
#   2021-02-12 - Include dbgsym ddeb packages for Ubuntu
#   2021-01-26 - Validate manually supplied --os-type and --os-version
#   2021-01-22 - Remove ambiguous $basearch from sles repository config
#   2021-01-14 - Add --version flag
#   2020-12-16 - Fix issue with detecting CentOS 8.3+
#   2020-12-14 - Fix error when specifying centos as os-type
#   2020-12-14 - Remove deprecated Linux distributions
#   2020-12-05 - Update names of yum/zypper repos
#   2020-12-01 - Update urls for MaxScale and Tools repositories
#   2020-11-30 - Add ability to skip check_installed
#   2020-11-30 - Add 'Unsupported' repository
#   2020-10-14 - Update MaxScale repos to use CDN
#   2020-10-13 - Add check_installed function to ensure script can run
#   2020-10-13 - Update usage instructions
#   2020-10-05 - Fix incorrect exit code
#   2020-09-11 - Update default MaxScale version to 2.5
#   2020-09-08 - Add MariaDB Xpand
#   2020-07-16 - Update default to MariaDB Enterprise 10.5
#   2020-06-08 - add Ubuntu 20.04 "focal"
#   2020-05-15 - fix wording of what Ubuntu LTS releases are supported
#   2020-04-29 - update curl command to correctly handle CDN redirects
#   2020-01-24 - Verify tokens to ensure that they are valid
#   2020-01-22 - Add "module_hotfixes = 1" to RHEL/CentOS 8 config (MDEV-20673)
#   2020-01-22 - Update msg strings for better output and consistency
#   2020-01-08 - Add autorefresh=1 to SLES repo configs
#   2019-11-18 - Add SLES 12 & 15
#   2019-09-26 - MDEV-20654 - change gpg key importing
#   2019-09-26 - Add RHEL 8, CentOS 8, and Debian 10
#   2019-09-24 - Update to MaxScale Version 2.4
#   2018-12-24 - Update to MaxScale Version 2.3

# This script will identify the OS distribution and version, make sure it's
# supported, and set up the appropriate MariaDB software repositories.

supported="
MariaDB Enterprise Repository supports these Linux OSs, on x86_64 and aarch64:
    * RHEL/Rocky 8 & 9 (rhel)
    * Ubuntu 18.04 LTS (bionic), 20.04 LTS (focal), & 22.04 LTS (jammy)
    * Debian 10 (buster), & Debian 11 (bullseye)
    * SLES 15 (sles)

on x86_64 only:
    * RHEL/CentOS 7
    * SLES 12

More information on supported OSs here: https://r.mariadb.com/docs-deploy-os"

get_version_info_server() {
  if [[ "${version_info_server}" = "" ]]; then
    latest_versions_server=$(curl -s https://dlm.mariadb.com/rest/releases/mariadb_enterprise_server/)

version_info_server="#         --mariadb-server-version should be specified as just the series,
#         e.g. '10.6' or as a specific <version>-<release>, e.g.:
#
#             --mariadb-server-version=10.6.5-2
#
#         The latest MariaDB Enterprise Server versions are:
#             ${latest_versions_server}
#
#         A complete list of MariaDB Enterprise Server versions is at:
#             https://r.mariadb.com/es-version-list"
  fi
}

get_version_info_maxscale() {
  if [[ "${version_info}" = "" ]]; then
    latest_versions_maxscale=$(curl -s https://dlm.mariadb.com/rest/releases/mariadbmaxscale/)

version_info_maxscale="#         --mariadb-maxscale-version should be specified as 'latest' (the
#         default) or as just the major series, e.g. '6' or '2.5', or as the
#         full version number, e.g.:
#
#             --mariadb-maxscale-version=6.2.3
#
#         The latest MariaDB Maxscale versions are:
#           ${latest_versions_maxscale}
#
#         A complete list of MariaDB MaxScale versions is at:
#             https://r.mariadb.com/mxs-version-list"
  fi
}

view_token="
#         Your token can be viewed at:
#         https://tools.mariadb.com/portal/downloads/token/"

mariadb_server_version=10.6
mariadb_enterprise_tools_version=latest
mariadb_maxscale_version=latest
apply=0
import_keys=0
skip_maxscale=0
skip_server=0
skip_enterprise_tools=0
skip_unsupported=1
skip_tools=0
skip_xpand=0
skip_verify=0
skip_check_installed=0
verbose=0
extra_options=""
version_info_server=""
version_info_maxscale=""


set_usage() {
  get_version_info_server
  get_version_info_maxscale

usage="#-------------------------------------------------------------------------------
# Simple one-line usage:
#-------------------------------------------------------------------------------
curl -LsS https://dlm.mariadb.com/enterprise-release-helpers/mariadb_es_repo_setup | bash -s -- --token=<token> [OTHER_OPTIONS]

#-------------------------------------------------------------------------------
# Release Notes and Checksums
#-------------------------------------------------------------------------------
# Release notes and checksums of the mariadb_es_repo_setup script are at:
# https://r.mariadb.com/es-repo-setup-relnote

#-------------------------------------------------------------------------------
# Basic usage:
#-------------------------------------------------------------------------------
# download the script
curl -LsSO https://dlm.mariadb.com/enterprise-release-helpers/mariadb_es_repo_setup

# verify the sha256 checksum of the script
curl -LsS https://dlm.mariadb.com/enterprise-release-helpers/checksums/sha256sums.txt | sha256sum -c --

# make the script executable
chmod -c +x ./mariadb_es_repo_setup

# run the script
sudo ./mariadb_es_repo_setup --token=<token> [OTHER_OPTIONS]

#-------------------------------------------------------------------------------
# Full distribution-specific instructions available at:
#-------------------------------------------------------------------------------
#  https://r.mariadb.com/docs-deploy
#-------------------------------------------------------------------------------

${supported}

Options:
    --help                  Display this help and exit.

    --verbose               Display [info] messages.

    --version               Output the script version and exit.

    --token=<token>         Your MariaDB Enterprise repository token (required).

    --mariadb-server-version=<version>
                            Override the default MariaDB Server version.
                            By default, the script will use '$mariadb_server_version'.

    --mariadb-enterprise-tools-version=<version>
                            Override the default MariaDB Enterprise Tools version.
                            By default, the script will use '$mariadb_enterprise_tools_version'.

    --mariadb-maxscale-version=<version>
                            Override the default MariaDB MaxScale version.
                            By default, the script will use '$mariadb_maxscale_version'.

    --os-type=<type>        Override detection of OS type. Acceptable values
                            include 'debian', 'ubuntu', 'rhel', and 'sles'.

    --os-version=<version>  Override detection of OS version. Acceptable values
                            depend on the OS type you specify.

    --arch=<architecture>   Override detection of CPU architecture. Acceptable
                            values are 'x86_64', 'aarch64', 'amd64', & 'arm64'.

    --skip-key-import       Skip importing GPG signing keys.

    --skip-maxscale         Skip the 'MaxScale' repository.

    --skip-server           Skip the 'MariaDB Enterprise Server' repository.

    --skip-enterprise-tools Skip the 'Enterprise Tools' repository

    --skip-tools            Skip the 'Tools' repository.

    --skip-verify           Skip verification of MariaDB Server versions.
                            Use with caution as this can lead to an invalid
                            repository configuration file being created.

    --skip-xpand            Skip the 'Xpand' instructions. RHEL/CentOS 7 only.

    --skip-check-installed  Skip tests for required prerequisites.

    --include-unsupported   Include the 'Unsupported' repository.

    --apply                 Write OS's repository configuration files. This
                            will also import GPG keys and update the package
                            cache on platforms where that behavior exists.

#-------------------------------------------------------------------------------
${version_info_server}
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
${version_info_maxscale}
#-------------------------------------------------------------------------------
"
}

# os_type = ubuntu, debian, rhel, sles
os_type=
# os_version as demanded by the OS (codename, major release, etc.)
os_version=

# token set to empty initially
token=

# These GPG URLs are used to fetch GPG keys on RHEL and SLES
key_urls=(
    https://supplychain.mariadb.com/MariaDB-MaxScale-GPG-KEY
    https://supplychain.mariadb.com/MariaDB-Enterprise-GPG-KEY
)

line(){
    printf "%s\n" "-------------------------------------------------------------------------------" >&2
}

msg(){
    type=$1 #${1^^}
    shift
    echo
    printf "# [$type] %s\n\n" "$@" >&2
}

error(){
    msg error "$@"
    exit 1
}

check_installed() {
  local not_installed
  local number_not_installed
  local install_message
  local need_to_install
  not_installed=""
  need_to_install=false
  for package in $@ ; do
    case ${os_type} in
      debian|ubuntu)
        if { dpkg -l ${package} | grep ii; } &>/dev/null ; then
          need_to_install=false
        else
          need_to_install=true
        fi
        ;;
      rhel)
        if { yum list installed ${package} ; } &>/dev/null ; then
          need_to_install=false
        else
          need_to_install=true
        fi
        ;;
      sles)
        if { rpm -q ${package} ; } &>/dev/null ; then
          need_to_install=false
        else
          need_to_install=true
        fi
        ;;
    esac
    if ${need_to_install} ; then
      if [ "${not_installed}" = "" ] ; then
        # number of not installed packages is 1
        not_installed="${package}"
        number_not_installed=1
      else
        # number of not installed packages is >1
        not_installed="${not_installed} ${package}"
        number_not_installed=2
      fi
    fi
  done
  if [ "${not_installed}" != "" ] ; then
      # One or more packages are not installed
      case ${number_not_installed} in
        1) install_message="The following package is needed by the script, but not installed:" ;;
        2) install_message="The following packages are needed by the script, but not installed:" ;;
      esac

      error "${install_message}
            ${not_installed}
        Please install and rerun the script.
        To disable this check add the \`--skip-check-installed\` flag"
  fi
}

verify_mariadb_server_version() {
  rx='^(mariadb-){0,1}(10+\.[2-8]|10+\.[2-8]+\.[1-9]{0,1}[0-9]{1}-[1-9]{0,1}[0-9]{1})$'
  if [[ $@ =~ $rx ]] ; then
    case $os_type in
      ubuntu|debian)
        verify_url="https://dlm.mariadb.com/repo/${token}/mariadb-enterprise-server/${mariadb_server_version}/deb/dists/${os_version}/Release"
        ;;
      rhel)
        verify_url="https://dlm.mariadb.com/repo/${token}/mariadb-enterprise-server/${mariadb_server_version}/rpm/rhel/${os_version}/${arch}/repodata/repomd.xml"
        ;;
      sles)
        verify_url="https://dlm.mariadb.com/repo/${token}/mariadb-enterprise-server/${mariadb_server_version}/rpm/sles/${os_version}/${arch}/repodata/repomd.xml"
        ;;
    esac
    error_log=$(mktemp)
    http_status_code=$(curl -LsS --stderr ${error_log} -o /dev/null -I -w "%{http_code}" ${verify_url})
    return_code="$?"
    error_output=$(cat ${error_log})
    rm -f ${error_log}

    case ${http_status_code} in
      200)
        ((verbose)) && msg info "MariaDB Enterprise Server version ${mariadb_server_version} is valid"
        ;;
      403|404)
        get_version_info_server
        error "MariaDB Enterprise Server version ${mariadb_server_version} is not working.
#         Please verify that it is correct.
#         Not all releases of MariaDB are available on all distributions.
${version_info_server}"
        ;;
      *)
        error_message="Problem encountered while trying to verify the MariaDB Enterprise Server version:"
        if [[ "${return_code}" -gt "0" ]]; then
          get_version_info_server
          error "${error_message}
          $error_output
${version_info_server}"
        else
          get_version_info_server
          error "${error_message}
#         Unexpected HTTP response code '${http_status_code}'
${version_info_server}"
        fi
        ;;
    esac
  else
    get_version_info_server
    error "MariaDB Server version ${mariadb_server_version} is not valid.
${version_info_server}"
  fi
}

verify_token(){
  error_log=$(mktemp)
  if ! [[ "$token" =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]
  then
    error "Invalid token format:          '$token'
#         The token should be of the form ########-####-####-####-############
#${view_token}"
  fi
  verify_url="https://dlm.mariadb.com/browse/${token}/mariadb_enterprise_server/"

  http_status_code=$(curl -LsS --stderr ${error_log} -o /dev/null -I -w "%{http_code}" ${verify_url})
  return_code="$?"
  error_output=$(cat ${error_log})
  rm -f ${error_log}

  case ${http_status_code} in
    200)
      ((verbose)) && msg info 'Token is valid.'
      ;;
    403|404)
      error "Invalid token. Please verify that it is correct. ${view_token}"
      ;;
    *)
      #error_message=$(echo -e "Problem encountered while trying to verify your token:\n")
      error_message="Problem encountered while trying to verify your token:"
      if [[ "${return_code}" -gt "0" ]]; then
        error "${error_message}
        $error_output"
      else
        error "${error_message}
        Unexpected HTTP response code '${http_status_code}'"
      fi
      ;;
  esac
}

version(){
  printf "mariadb_es_repo_setup %s\n" "$version"
  msg info "Release information for this script, including checksums, is available here:
#        https://r.mariadb.com/es-repo-setup-relnote"
}

while :; do
    case $1 in
        --version)
            version
            exit 0
            ;;
        --token)
            if [[ -n $2 ]] && [[ $2 != --* ]]; then
                token=$2
                shift
            else
                error "The $1 option requires an argument"
            fi
            ;;
        --token=?*)
          token=${1#*=}
          ;;
        --token=)
          error "The $1 option requires an argument"
          ;;
        --mariadb-server-version)
            if [[ -n $2 ]] && [[ $2 != --* ]]; then
                mariadb_server_version=$2
                shift
            else
                error "The $1 option requires an argument"
            fi
            ;;
        --mariadb-server-version=?*)
            mariadb_server_version=${1#*=}
            ;;
        --mariadb-server-version=)
            error "The $1 option requires an argument"
            ;;
        --mariadb-enterprise-tools-version)
            if [[ -n $2 ]] && [[ $2 != --* ]]; then
                mariadb_enterprise_tools_version=$2
                shift
            else
                error "The $1 option requires an argument"
            fi
            ;;
        --mariadb-enterprise-tools-version=?*)
            mariadb_enterprise_tools_version=${1#*=}
            ;;
        --mariadb-enterprise-tools-version=)
            error "The $1 option requires an argument"
            ;;
        --mariadb-maxscale-version)
            if [[ -n $2 ]] && [[ $2 != --* ]]; then
                mariadb_maxscale_version=$2
                shift
            else
                error "The $1 option requires an argument"
            fi
            ;;
        --mariadb-maxscale-version=?*)
            mariadb_maxscale_version=${1#*=}
            ;;
        --mariadb-maxscale-version=)
            error "The $1 option requires an argument"
            ;;
        --apply)
            apply=1
            ;;

        --import-keys)
            import_keys=1
            ;;
        --skip-maxscale)
            skip_maxscale=1
            ;;
        --skip-server)
            skip_server=1
            ;;
        --skip-enterprise-tools)
            skip_enterprise_tools=1
            ;;
        --skip-tools)
            skip_tools=1
            ;;
        --skip-verify)
            skip_verify=1
            ;;
        --skip-xpand)
            skip_xpand=1
            ;;
        --include-unsupported)
            skip_unsupported=0
            ;;
        --skip-check-installed)
            skip_check_installed=1
            ;;

        --os-type)
            if [[ -n $2 ]] && [[ $2 != --* ]]; then
                os_type=$2
                shift
            else
                error "The $1 option requires an argument"
            fi
            ;;
        --os-type=?*)
            os_type=${1#*=}
            ;;
        --os-type=)
            error "The $1 option requires an argument"
            ;;
        --arch)
            if [[ -n $2 ]] && [[ $2 != --* ]]; then
                arch=$2
                shift
            else
                error "The $1 option requires an argument"
            fi
            ;;
        --arch=?*)
            arch=${1#*=}
            # normalize arch names
            case $arch in
              amd64|x86_64)
                arch='x86_64'
                ;;
              aarch64|arm64)
                arch='aarch64'
                ;;
              *)
                error "You set arch=$arch but valid architectures are: x86_64 (amd64) and aarch64 (arm64)"
                ;;
            esac
            ;;
        --arch=)
            error "The $1 option requires an argument"
            ;;
        --os-version)
            if [[ -n $2 ]] && [[ $2 != --* ]]; then
                os_version=$2
                shift
            else
                error "The $1 option requires an argument"
            fi
            ;;
        --os-version=?*)
            os_version=${1#*=}
            ;;
        --os-version=)
            error "The $1 option requires an argument"
            ;;
        --verbose)
            verbose=1
            ;;
        --help)
            version
            set_usage
            printf "%s" "$usage"
            exit
            ;;
        -?*)
            msg warning "Unknown option (ignored): $1\n"
            ;;
        *)
            break
    esac
    shift
done

# We accept setting os-type to centos or rocky, but we normalize it to 'rhel'
case ${os_type} in
  centos|rocky*) os_type='rhel' ;;
esac

if [[ "${token}" = "" ]]; then
    set_usage
    printf "%s" "${usage}"
    exit
fi

open_outfile(){
    unset outfile
    if ! (( apply ))
    then
        exec 4>&1
    else
        case $1 in
            ubuntu|debian) outfile=/etc/apt/sources.list.d/mariadb.list ;;
            rhel|centos) outfile=/etc/yum.repos.d/mariadb.repo ;;
            sles) outfile=/etc/zypp/repos.d/mariadb.repo ;;
            *) error "Sorry, your OS is not supported." "$supported"
        esac
        if [[ -e $outfile ]]
        then
      local suffix=0
      while [[ -e $outfile.old_$((++suffix)) ]]; do :; done
            msg warning "Found existing file at $outfile. Moving to $outfile.old_$suffix"
      if ! mv "$outfile" "$outfile.old_$suffix"
            then
                error "Could not move existing '$outfile'. Aborting"
            fi
        fi
        if ! exec 4>"$outfile"
        then
            error "Could not open file $outfile for writing. Aborting"
        fi
    fi
}

identify_os(){
    if [[ ! $arch ]]
    then
    arch=$(uname -m)
    fi
    # Check for macOS
    if [[ $(uname -s) == Darwin ]]
    then
        printf '%s\n' \
            'To install MariaDB Server from a repository on macOS, please use Homebrew:' \
            '    https://mariadb.com/kb/en/mariadb/installing-mariadb-on-macos-using-homebrew/' \
            'Or use the native PKG installer:' \
            '    https://mariadb.com/kb/en/mariadb/installing-mariadb-server-pkg-packages-on-macos/'
        exit
    # Check for RHEL/CentOS, Fedora, etc.
    elif command -v rpm >/dev/null && [[ -e /etc/redhat-release ]]
    then
        os_type=rhel
        el_version=$(rpm -qa '(oraclelinux|sl|redhat|centos|fedora|rocky|alma)*release(|-server)' --queryformat '%{VERSION}')
        case $el_version in
            5*) os_version=5 ; error "RHEL/CentOS 5 is no longer supported" "$supported" ;;
            6*) os_version=6 ; error "RHEL/CentOS 6 is no longer supported" "$supported" ;;
            7*) os_version=7 ;;
            8*) os_version=8 ; extra_options="module_hotfixes = 1" ;;
            9*) os_version=9 ; extra_options="module_hotfixes = 1" ;;
             *) error "Detected RHEL or compatible but version ($el_version) is not supported." "$supported" ;;
         esac
    elif [[ -e /etc/os-release ]]
    then
        . /etc/os-release
        # Is it Debian?
        case $ID in
            debian)
                os_type=debian
                debian_version=$(< /etc/debian_version)
                case $debian_version in
                    8* ) os_version=jessie   ; ((skip_verify)) || error  "Debian 8 'jessie' has reached End of Life and is no longer supported." "$supported" ;;
                    9* ) os_version=stretch ; ((skip_verify)) || error "Debian 9 'stretch' has reached End of Life and is no longer supported." "$supported" ;;
                    10*) os_version=buster ;;
                    11*) os_version=bullseye ;;
                     *) error "Detected Debian but version ($debian_version) is not supported." "$supported" ;;
                esac
                ;;
            ubuntu)
                os_type=ubuntu
                . /etc/lsb-release
                os_version=$DISTRIB_CODENAME
                case $os_version in
                    precise ) error 'Ubuntu 12.04 LTS "Precise" has reached End of Life and is no longer supported.' "$supported" ;;
                    trusty  ) error 'Ubuntu 14.04 LTS "Trusty" has reached End of Life and is no longer supported.' "$supported" ;;
                    xenial  ) error 'Ubuntu 16.04 LTS "Xenial" has reached End of Life and is no longer supported.' "$supported" ;;
                    bionic  ) extra_options=" lang=none target-=CNF" ;;
                    focal|jammy ) ;;
                    *) error "Detected Ubuntu but version ($os_version) is not supported." "Only certain Ubuntu LTS releases are supported."  "$supported" ;;
                esac
                ;;
            sles)
                os_type=sles
                os_version=${VERSION_ID%%.*}
                case $os_version in
                  12|15) ;;
                  *) error "Detected SLES but version ($os_version) is not supported."  "$supported" ;;
                esac
                if [[ $arch == aarch64 ]] && [[ $os_version == "12" ]]; then error "SLES 12 is not currently supported for ARM64"; fi
                ;;
        esac
    fi
    if ! [[ $os_type ]] || ! [[ $os_version ]]
    then
        error "Could not identify OS type or version." "$supported"
    fi
}

remove_mdbe_repo(){
    case $os_type in
        debian|ubuntu)
            # First, remove the MariaDB Enterprise Repository config package, if it's installed
            if dpkg -l mariadb-enterprise-repository &>/dev/null
            then
                ((verbose)) && msg info 'Removing mariadb-enterprise-repository package...'
                dpkg -P mariadb-enterprise-repository
            fi
            ;;
        rhel|sles)
            # First, remove the MariaDB Enterprise Repository config package, if it's installed
            if rpm -qs mariadb-enterprise-repository &>/dev/null
            then
                ((verbose)) && msg info 'Removing mariadb-enterprise-repository package...'
                rpm -e mariadb-enterprise-repository
            fi
            ;;
    esac
}

clean_package_cache(){
  ((verbose)) && msg info 'Cleaning package cache...'
  case $1 in
    yum)
      yum clean all
      ;;
    dnf)
      dnf clean all
      ;;
    zypper)
      zypper clean --all
      ;;
  esac
}


# The directory structure of the MariaDB Enterprise Server repositories are
# different from regular MariaDB. There the the directories for each version
# have "mariadb-" prepended to the version number. For example, mariadb-10.4
# instead of just the number (e.g. 10.4) like MariaDB Enterprise Server has. To
# help support customers who may have used the non-Enterprise version of the
# script, we should accept version numbers in the following formats:
#   - mariadb-10.4
#   - 10.4
#   - 10.4.7
# To do this, if the version number is specified using the "mariadb-10.4"-style
# format we need to remove the "mariadb-" part.
if [[ $mariadb_server_version = mariadb-* ]]
then
    mariadb_server_version_real=${mariadb_server_version#*-}
    msg warning "Adjusting given --mariadb-server-version ('$mariadb_server_version') to not have the 'mariadb-' prefix ('$mariadb_server_version_real')"
    mariadb_server_version=$mariadb_server_version_real
fi

# If we're applying the repository info, try to import the signing keys.
((apply)) && import_keys=1

if [[ ! $arch ]]
then
  arch=$(uname -m)
fi

case $arch in
    x86_64) ;;
    aarch64) skip_tools=1 ; skip_enterprise_tools=1 ;;
    *) error "The MariaDB Enterprise Repository only supports x86_64 or aarch64 (detected: $arch)." "$supported" ;;
esac

if [[ $os_type ]] && [[ $os_version ]]
then
    # Both were given on the command line, so we'll just try using those.
    ((verbose)) && msg info "Skipping OS detection and using OS type '$os_type' and version '$os_version' given on the command line"
    # We're skipping OS detection, so set extra_options to the correct value
    # for RHEL
    case $os_version in
      7*|8*|9*)
        if [ $os_type = 'rhel' ] ; then
          case $os_version in
            7*) os_version=7 ;;
            8*) os_version=8 ; extra_options="module_hotfixes = 1" ;;
            9*) os_version=9 ; extra_options="module_hotfixes = 1" ;;
          esac
        elif [ $os_type = 'debian' ] ; then
          case $os_version in
            7) os_version='wheezy' ; error "Debian 7 'wheezy' is not supported." "$supported" ;;
            8) os_version='jessie' ; msg warning "Debian 8 'jessie' has reached End of Life and is no longer supported." "$supported" ;;
            9) os_version='stretch' ; msg warning "Debian 9 'stretch' has reached End of Life and is no longer supported." "$supported" ;;
          esac
        else
          error "--os-version='$os_version' is only valid if --os-type='rhel', you gave '$os_type'" "$supported"
        fi
        ;;
      10|11)
        if [ $os_type = 'debian' ] ; then
          case $os_version in
            10) os_version='buster' ;;
            11) os_version='bullseye' ;;
          esac
        else
          error "--os-version='$os_version' is only valid if --os-type='debian', you gave '$os_type'" "$supported"
        fi
        ;;
      12*|15*)
        if [ $os_type = 'sles' ] ; then
          case $os_version in
            12*) os_version=12 ;;
            15*) os_version=15 ;;
          esac
        else
          error "--os-version='$os_version' is only valid if --os-type='sles', you gave '$os_type'" "$supported"
        fi
        ;;
      xenial|bionic|focal|jammy)
        if [ $os_type != 'ubuntu' ] ; then
          error "--os-version='$os_version' is only valid if --os-type='ubuntu', you gave '$os_type'" "$supported"
        fi
        ;;
      stretch|buster|bullseye)
        if [ $os_type != 'debian' ] ; then
          error "--os-version='$os_version' is only valid if --os-type='debian', you gave '$os_type'" "$supported"
        fi
        ;;
      *) error "--os-type='$os_type' with --os-version='$os_version' is an invalid combination" "$supported" ;;
    esac
elif [[ $os_type ]] || [[ $os_version ]]
then
    error 'If you give either --os-type or --os-version, you must give both.'
else
    identify_os
fi

# Handle various aarch64 repositories
if [[ "$arch" = 'aarch64' ]] ; then
  case $os_version in
    7)
      ((skip_server))   || msg info "Skipping MariaDB Enterprise Server as RHEL 7 does not have aarch64 packages available."
      ((skip_server))   || skip_server=1
      ((skip_enterprise_tools)) || skip_enterprise_tools=1
      ((skip_maxscale)) || msg info "Skipping MariaDB MaxScale as RHEL 7 does not have aarch64 packages available."
      ((skip_maxscale)) || skip_maxscale=1
      ;;
    12)
      error "There are no aarch64 packages available for MariaDB Server or MariaDB MaxScale for SLES 12."
      ;;
  esac
fi

if (($skip_check_installed))
then
  ((verbose)) && msg info "Skipping check for script prerequisites."
else
  ((verbose)) && msg info "Checking for script prerequisites."
case $os_version in
  stretch) check_installed curl ca-certificates apt-transport-https ;;
  *) check_installed curl ca-certificates ;;
esac
fi

verify_token

rhel_repo_server='
[mariadb-es-main]
name = MariaDB Enterprise Server
baseurl = https://dlm.mariadb.com/repo/%s/mariadb-enterprise-server/%s/rpm/rhel/%s/%s
gpgkey = %s
gpgcheck = 1
enabled = 1
%s'
rhel_repo_unsupported='
[mariadb-es-unsupported]
name = MariaDB Enterprise Server Unsupported
baseurl = https://dlm.mariadb.com/repo/%s/mariadb-enterprise-unsupported/%s/rpm/rhel/%s/%s
gpgkey = %s
gpgcheck = 1
enabled = 1
%s'
rhel_repo_enterprise_tools='
[mariadb-enterprise-tools]
name = MariaDB Enterprise Tools
baseurl = https://dlm.mariadb.com/repo/%s/enterprise-tools/%s/rpm/rhel/%s/%s
gpgkey = %s
gpgcheck = 1
enabled = 1
%s'
rhel_repo_maxscale='
[mariadb-maxscale]
# To use the latest stable release of MaxScale, use "latest" as the version
# To use the latest beta (or stable if no current beta) release of MaxScale, use "beta" as the version
name = MariaDB MaxScale
baseurl = https://dlm.mariadb.com/repo/%s/maxscale/%s/yum/rhel/%s/%s
gpgkey = %s
gpgcheck = 1
enabled = 1'
rhel_repo_tools='
[mariadb-tools]
name = MariaDB Tools
baseurl = https://downloads.mariadb.com/Tools/rhel/%s/x86_64
gpgkey = %s
gpgcheck = 1
enabled = 1'
rhel_repo_xpand='#
# For MariaDB Xpand
#
# Xpand Documentation and Deployment instructions are at:
#   https://r.mariadb.com/xpand-features
#
# Xpand is only compatible with RHEL/CentOS 7
#'


deb_repo_server_info='
# MariaDB Server
# To use a different major version of the server, or to pin to a specific minor version, change URI below.'
deb_repo_server='deb [arch=amd64,arm64] https://dlm.mariadb.com/repo/%s/mariadb-enterprise-server/%s/deb %s main'
deb_repo_server_debug="deb [arch=amd64,arm64${extra_options}] https://dlm.mariadb.com/repo/%s/mariadb-enterprise-server/%s/deb %s main/debug"
deb_repo_unsupported_info='
# Unsupported supplemental packages
# This repository contains unsupported storage engines and other packages'
deb_repo_unsupported='deb [arch=amd64,arm64] https://dlm.mariadb.com/repo/%s/mariadb-enterprise-unsupported/%s/deb %s main'
deb_repo_unsupported_debug='deb [arch=amd64,arm64] https://dlm.mariadb.com/repo/%s/mariadb-enterprise-unsupported/%s/deb %s main/debug'
deb_repo_enterprise_tools_info='
# MariaDB Enterprise Tools packages
# This repository contains various tools for use with MariaDB Enterprise'
deb_repo_enterprise_tools='deb [arch=amd64,arm64] https://dlm.mariadb.com/repo/%s/enterprise-tools/%s/deb %s main'
deb_repo_enterprise_tools_debug=''
deb_repo_maxscale_info='
# MariaDB MaxScale
# To use the latest stable release of MaxScale, use "latest" as the version
# To use the latest beta (or stable if no current beta) release of MaxScale, use "beta" as the version'
deb_repo_maxscale='deb [arch=amd64,arm64] https://dlm.mariadb.com/repo/%s/maxscale/%s/%s %s main'
deb_repo_tools_info='
# MariaDB Tools'
deb_repo_tools='deb [arch=amd64] http://downloads.mariadb.com/Tools/%s %s main'

sles_repo_server='
[mariadb-es-server]
name = MariaDB Enterprise Server
baseurl = https://dlm.mariadb.com/repo/%s/mariadb-enterprise-server/%s/rpm/sles/%s/%s
gpgkey = %s
gpgcheck = 1
type=rpm-md
enabled = 1
autorefresh=1
priority=10'
sles_repo_unsupported='
[mariadb-es-unsupported]
name = MariaDB Enterprise Unsupported
baseurl = https://dlm.mariadb.com/repo/%s/mariadb-enterprise-unsupported/%s/rpm/sles/%s/%s
gpgkey = %s
gpgcheck = 1
type=rpm-md
enabled = 1
autorefresh=1
priority=10'
sles_repo_enterprise_tools=''
sles_repo_maxscale='
[mariadb-maxscale]
# To use the latest stable release of MaxScale, use "latest" as the version
# To use the latest beta (or stable if no current beta) release of MaxScale, use "beta" as the version
name = MariaDB MaxScale
baseurl = https://dlm.mariadb.com/repo/%s/maxscale/%s/yum/sles/%s/%s
gpgkey = %s
enabled = 1
autorefresh=1
gpgcheck = 1
type=rpm-md
priority=10'
sles_repo_tools='
[mariadb-tools]
name = MariaDB Tools
baseurl = https://downloads.mariadb.com/Tools/sles/%s/x86_64
gpgkey = %s
enabled = 1
autorefresh=1
gpgcheck = 1
type=rpm-md
priority=10'

open_outfile "$os_type"

# If we're not writing to stdout, try to remove the mariadb-enterprise-repository package
((apply)) && remove_mdbe_repo

case $os_type in
    ubuntu|debian)
        ((skip_server)) || ((skip_verify)) || verify_mariadb_server_version $mariadb_server_version
        # If we are not writing to stdout, create an apt preferences file to give our 
        # packages the highest possible priority
        if ! ((apply))
        then
            ((verbose)) && msg info 'If run with --apply, this script will create /etc/apt/preferences.d/mariadb-enterprise.pref to give packages from MariaDB repositories highest priority, in order to avoid conflicts with packages from OS and other repositories. This file would have the following contents:'
            ((verbose)) && line
            ((verbose)) && printf "Package: *\nPin: origin dlm.mariadb.com\nPin-Priority: 1000\n"
            ((verbose)) && line && echo
        else
            printf '%s\n' \
            'Package: *' \
            'Pin: origin dlm.mariadb.com' \
            'Pin-Priority: 1000' \
            > /etc/apt/preferences.d/mariadb-enterprise.pref
        fi
        { 
            if ((verbose))
            then
                if ! ((skip_server)) || ! ((skip_enterprise_tools)) || ! ((skip_maxscale)) || ! ((skip_tools))
                then
                    if ! ((apply))
                    then
                    msg info 'If run with --apply, this script will create /etc/apt/sources.list.d/mariadb.list with the following contents:'
                    line
                    fi
                fi
            fi
            if ((verbose))
            then
                ((skip_server)) || printf "$deb_repo_server_info\n"
            fi
            ((skip_server)) || printf "$deb_repo_server\n\n" "$token" "$mariadb_server_version" "$os_version"
            case $os_type in
              ubuntu)
                ((skip_server)) || printf "$deb_repo_server_debug\n\n" "$token" "$mariadb_server_version" "$os_version"
                ;;
            esac
            if ((verbose))
            then
                ((skip_unsupported)) || printf "$deb_repo_unsupported_info\n"
            fi
            ((skip_unsupported)) || printf "$deb_repo_unsupported\n\n" "$token" "$mariadb_server_version" "$os_version"
            case $os_type in
              ubuntu)
                ((skip_unsupported)) || printf "$deb_repo_unsupported_debug\n\n" "$token" "$mariadb_server_version" "$os_version"
                ;;
            esac
            if ((verbose))
            then
                ((skip_enterprise_tools)) || printf "$deb_repo_enterprise_tools_info\n"
            fi
            ((skip_enterprise_tools)) || printf "$deb_repo_enterprise_tools\n\n" "$token" "$mariadb_enterprise_tools_version" "$os_version"
            case $os_type in
              ubuntu)
                ((skip_enterprise_tools)) || printf "$deb_repo_enterprise_tools_debug\n\n" "$token" "$mariadb_enterprise_tools_version" "$os_version"
                ;;
            esac
            if ((verbose))
            then
                ((skip_maxscale)) || printf "$deb_repo_maxscale_info\n"
            fi
            ((skip_maxscale)) || printf "$deb_repo_maxscale\n\n" "$token" "$mariadb_maxscale_version" "apt" "$os_version"
            if ((verbose))
            then
                ((skip_tools)) || printf "$deb_repo_tools_info\n"
            fi
            ((skip_tools)) || printf "$deb_repo_tools\n" "$os_type" "$os_version"
            if ((verbose))
            then
                if ! ((skip_server)) || ! ((skip_unsupported)) || ! ((skip_enterprise_tools)) || ! ((skip_maxscale)) || ! ((skip_tools))
                then
                    if ! ((apply))
                    then
                    line && echo
                    fi
                fi
            fi
        } >&4
        ((apply)) && msg info "Repository file successfully written to $outfile"
        if ((import_keys))
        then
            ((verbose)) && msg info 'Adding trusted package signing keys...' 
            if curl -LsSO https://supplychain.mariadb.com/mariadb-keyring-2019.gpg
            then
                if curl -LsS https://supplychain.mariadb.com/mariadb-keyring-2019.gpg.sha256 | sha256sum -c --quiet
                then
                    ((verbose)) && msg info 'Running apt-get update...'
                    if mv mariadb-keyring-2019.gpg /etc/apt/trusted.gpg.d/ &&
                      chmod 644 /etc/apt/trusted.gpg.d/mariadb-keyring-2019.gpg &&
                      chmod 640 /etc/apt/sources.list.d/mariadb.list &&
                      apt-get -qq update
                    then
                        ((verbose)) && msg info 'Done adding trusted package signing keys'
                        true
                    else
                        msg error 'Failed to add trusted package signing keys'
                    fi
                else
                    msg error 'Failed to verify trusted package signing keys keyring file'
                fi
            else
                msg error 'Failed to download trusted package signing keys keyring file'
            fi
        elif ! ((apply))
        then
            ((verbose)) && msg info 'If run with --import-keys/--apply, this script will download the package signing keys keyring file, verify, and then install it with the following commands:'
            ((verbose)) && line
            ((verbose)) && printf "curl -LsSO https://downloads.mariadb.com/MariaDB/mariadb-keyring-2019.gpg\n"
            ((verbose)) && printf "curl -LsS https://downloads.mariadb.com/MariaDB/mariadb-keyring-2019.gpg.sha256 | sha256sum -c --quiet\n"
            ((verbose)) && printf "mv mariadb-keyring-2019.gpg /etc/apt/trusted.gpg.d/ && apt-get -qq update\n"
            ((verbose)) && line && echo
        fi
        echo >&4
        ;;
    rhel)
        ((skip_server)) || ((skip_verify)) || verify_mariadb_server_version $mariadb_server_version
        {
            if ((verbose))
            then
                outfile=/etc/yum.repos.d/mariadb.repo
                if ! ((apply))
                then
                msg info "If run with --apply, this script will write the following to $outfile :"
                line
                fi
            fi
            ((skip_server)) || printf "$rhel_repo_server\n\n" "$token" "$mariadb_server_version" "$os_version" "$arch" "${key_urls[1]}" "$extra_options"
            ((skip_unsupported)) || printf "$rhel_repo_unsupported\n\n" "$token" "$mariadb_server_version" "$os_version" "$arch" "${key_urls[1]}" "$extra_options"
            ((skip_enterprise_tools)) || printf "$rhel_repo_enterprise_tools\n\n" "$token" "$mariadb_enterprise_tools_version" "$os_version" "$arch" "${key_urls[1]}" "$extra_options"
            ((skip_maxscale)) || printf "$rhel_repo_maxscale\n\n" "$token" "$mariadb_maxscale_version" "$os_version" "$arch" "${key_urls[0]}"
            ((skip_tools)) || printf "$rhel_repo_tools\n\n" "$os_version" "${key_urls[1]}"
            ((skip_xpand)) || [ $os_version != 7 ] || [[ "${mariadb_server_version}" != 10.5* ]] || printf "$rhel_repo_xpand\n\n"
            if ! ((apply))
            then
            ((verbose)) && line
            fi
        } >&4
        ((apply)) && msg info "Repository file successfully written to $outfile"
        if ((import_keys))
        then
            ((verbose)) && msg info 'Adding trusted package signing keys...'
            if rpm --import ${key_urls[@]}
            then
                ((verbose)) && msg info 'Successfully added trusted package signing keys.'
                true
            else
                msg error 'Failed to add trusted package signing keys.'
            fi
            clean_package_cache yum
        else
            if ((verbose))
            then
                if ! ((apply))
                then
                    if ! ((import_keys))
                    then
                        echo
                        msg info 'If run with --import-keys/--apply, this script will import package signing keys used by MariaDB with the following command:'
                        line
                        echo "rpm --import ${key_urls[*]}"
                        line
                        echo
                    fi
                fi
            fi
        fi
        ;;
    sles)
        ((skip_server)) || ((skip_verify)) || verify_mariadb_server_version $mariadb_server_version
        {
            if ((verbose))
            then
                outfile=/etc/zypp/repos.d/mariadb.repo
                if ! ((apply))
                then
                  msg info "If run with --apply, this script will write the following to $outfile :"
                  line
                fi
            fi
            ((skip_server)) || printf "$sles_repo_server\n\n" "$token" "$mariadb_server_version" "$os_version" "$arch" "${key_urls[1]}"
            ((skip_unsupported)) || printf "$sles_repo_unsupported\n\n" "$token" "$mariadb_server_version" "$os_version" "$arch" "${key_urls[1]}"
            ((skip_enterprise_tools)) || printf "$sles_repo_enterprise_tools\n\n" "$token" "$mariadb_enterprise_tools_version" "$os_version" "$arch" "${key_urls[1]}"
            ((skip_maxscale)) || printf "$sles_repo_maxscale\n\n" "$token" "$mariadb_maxscale_version" "$os_version" "$arch" "${key_urls[0]}"
            ((skip_tools)) || printf "$sles_repo_tools\n" "$os_version" "${key_urls[1]}"
            if ! ((apply))
            then
            ((verbose)) && line
            fi
        } >&4
        ((apply)) && msg info "Repository file successfully written to $outfile"
        if ((import_keys))
        then
            ((verbose)) && msg info 'Adding trusted package signing keys...'
              if rpm --import "${key_urls[@]}"
              then
                  ((verbose)) && msg info 'Successfully added trusted package signing keys.'
                  true
              else
                  msg error 'Failed to add trusted package signing keys.'
              fi
            clean_package_cache zypper
        else
            if ((verbose))
            then
                if ! ((apply))
                then
                    if ! ((import_keys))
                    then
                        echo
                        msg info 'If run with --import-keys/--apply, this script will import package signing keys used by MariaDB with the following command:'
                        line
                        echo "rpm --import ${key_urls[*]}"
                        line
                        echo
                    fi
                fi
            fi
        fi
        ;;
    *)
        error "Sorry, your OS is not supported." "$supported"
        ;;
esac
